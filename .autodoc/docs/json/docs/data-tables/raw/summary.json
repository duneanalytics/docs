{
  "folderName": "raw",
  "folderPath": "docs/data-tables/raw",
  "url": "https://dune.com/docs/data-tables/raw",
  "files": [
    {
      "fileName": "blocks.md",
      "filePath": "docs/data-tables/raw/blocks.md",
      "url": "https://dune.com/docs/data-tables/raw/blocks.md",
      "summary": "# Blocks\n\nThis section of the app technical guide covers the concept of blocks in blockchains and rollups. A block is a collection of transactions that incrementally alter the state of an EVM system. Transactions within a block can only be executed one after the other, not in parallel. The purpose of this section is to provide an understanding of how blocks work in the context of the Dune Docs project.\n\n## Tables\n\nThis section provides tables that are useful for identifying block activity and transaction changes over time. There are two tables provided, one for the V2 Engine (Spark SQL) and one for the V1 Engine (PostgreSQL). Each table contains information about the chains, tables, and notes for each chain. For example, the Ethereum Mainnet chain has a table called `ethereum.blocks` that contains information about blocks on the Ethereum Mainnet.\n\n## Column Data\n\nThis section provides a description of the data contained in each column of the block tables. The table contains columns such as `time`, `number`, `hash`, `parent hash`, `gas limit`, `gas used`, `miner`, `difficulty`, `total difficulty`, `nonce`, `size`, and `base_fee_per_gas`. Each column is described in detail, including its data type and a brief description of its purpose.\n\n### Example\n\nThis section provides an example of the data contained in the block tables. The example is in the form of a video that demonstrates how to use the block tables to identify block activity and transaction changes over time.\n\nOverall, this app technical guide provides a comprehensive understanding of blocks in the context of the Dune Docs project. It covers the tables and column data that are useful for identifying block activity and transaction changes over time. The guide is useful for developers who are working on the Dune Docs project and need to understand how blocks work in the context of the project.",
      "questions": "1. What is the purpose of the Dune Docs app and how does it relate to blockchain SQL analysis?\n    \n    The app technical guide describes the tables and column data related to blocks in various blockchain chains. A blockchain SQL analyst might want to know how this information can be used in their analysis and what specific insights they can gain from it.\n\n2. Are there any limitations or gaps in the data provided by the Dune Docs app that might impact blockchain SQL analysis?\n\n    The tables provided in the app technical guide do not contain certain information such as `nonce`, `miner`, `difficulty`, `total_difficulty`, `size`, and `base_fee_per_gas` for some chains. A blockchain SQL analyst might want to know how these limitations might impact their analysis and if there are any workarounds.\n\n3. How does the Dune Docs app handle rollups and how can this information be used in blockchain SQL analysis?\n\n    The app technical guide mentions that blocks are the building blocks of rollups, but it does not provide specific information on how rollups are handled in the app. A blockchain SQL analyst might want to know how rollups are represented in the app and how this information can be used in their analysis."
    },
    {
      "fileName": "event-logs.md",
      "filePath": "docs/data-tables/raw/event-logs.md",
      "url": "https://dune.com/docs/data-tables/raw/event-logs.md",
      "summary": "# Event Logs\n\nThis guide covers the `Event Logs` tables that store all logs data generated by smart contracts. The logs are an elegant way to store tiny amounts of data on EVM blockchains for a small amount of gas. Specifically, event logs are useful to let other people know something has happened without them having to query contracts individually. The guide provides a list of tables for the V2 Engine (Spark SQL) and V1 Engine (PostgreSQL) for different chains. \n\nThe `Tables` section of the guide provides a list of tables for the V2 Engine (Spark SQL) and V1 Engine (PostgreSQL) for different chains. The tables are named after the chain they belong to and contain logs data generated by smart contracts. The tables are useful for querying contracts that are not yet decoded or are not able to be decoded since the code of the smart contract is not public. \n\nThe `Column Data` section of the guide provides a description of the columns in the `Event Logs` tables. The columns include `contract_address`, `topic1`, `topic2`, `topic3`, `topic4`, `data`, `tx_hash`, `block_hash`, `block_number`, `block_time`, `index`, and `tx_index`. The columns contain information such as the address of the contract that emitted the log, keccak256 hash of a flattened event declaration string, unindexed data containing further information on the event, the transaction hash of the transaction that produced this log, and the time when the block was mined that includes this log. \n\nFor more information on this topic, the guide provides a link to an article on understanding event logs on the Ethereum blockchain. \n\nExample:\n```\n|   Chain           |   Table             | Notes |\n| ----------------  | ------------------- | ----- |\n| Ethereum Mainnet  | `ethereum.logs`     |       |\n| Gnosis Chain      | `gnosis.logs`       |       |\n| Polygon           | `polygon.logs`      |       |\n| Optimism          | `optimism.logs`     |       |\n| Optimism (legacy) | `optimism_legacy_ovm1.logs` |       |\n| BNB Chain         | `bnb.logs`          |       |\n| Arbitrum          | `arbitrum.logs`     |       |\n| Avalanche C-Chain  | `avalanche_c.logs` |       |\n```\nThe above example shows the tables for the V2 Engine (Spark SQL) for different chains. \n\n```\n|   Chain              |   Table         | Notes |\n| -------------------  | --------------- | ----- |\n| Ethereum Mainnet     | `ethereum.logs` |       |\n| Gnosis Chain (xDai)  | `xdai.logs`     |       |\n| Polygon              | `polygon.logs`  |       |\n| Optimism (OVM 1 & 2) | `optimism.logs` |       |\n| BNB Chain (BSC)      | `bsc.logs`      |       |\n```\nThe above example shows the tables for the V1 Engine (PostgreSQL) for different chains. \n\n### Column Data\n\n|   Column name      |   Data type     |    Description   |\n| ------------------ | :------------: | -------------------------------------------------------------- |\n| `contract_address` | _bytea_        | The address of the contract that emitted the log               |\n| `topic1`           | _bytea_        | keccak256 hash of a flattened event declaration string         |\n| `topic2`           | _bytea_        | Second indexed `topic` of the event                            |\n| `topic3`           | _bytea_        | Third indexed `topic` of the event                             |\n| `topic4`           | _bytea_        | Fourth indexed `topic` of the event                            |\n| `data`             | _bytea_        | Unindexed data containing further information on the event     |\n| `tx_hash`          | _bytea_        | The transaction hash of the transaction that produced this log |\n| `block_hash`       | _bytea_        | A unique identifier for that block                             |\n| `block_number`     | _int8_         | The length of the blockchain in blocks                         |\n| `block_time`       | _timestamptz_  | The time when the block was mined that includes this log       |\n| `index`            | _numeric_      | This logs index position in the block (cumulative amount of logs ordered by execution) |\n| `tx_index`         | _numeric_      | The index position of the transaction in this block (cumulative amount of transactions ordered by execution) |\n\nThe above example shows the columns in the `Event Logs` tables.",
      "questions": "1. What is the purpose of the Event Logs tables in this app and how are they useful for blockchain analysis?\n   \n   The Event Logs tables store all logs data generated by smart contracts and can be useful for querying contracts that are not yet decoded or are not able to be decoded since the code of the smart contract is not public. They are also useful for letting other people know something has happened without them having to query contracts individually.\n\n2. What engines are used to store the data in the tables and what chains are supported by each engine?\n   \n   The V2 Engine (Spark SQL) is used to store data in the tables and supports Ethereum Mainnet, Gnosis Chain, Polygon, Optimism, Optimism (legacy), BNB Chain, and Avalanche C-Chain. The V1 Engine (PostgreSQL) is also used and supports Ethereum Mainnet, Gnosis Chain (xDai), Polygon, Optimism (OVM 1 & 2), and BNB Chain (BSC).\n\n3. What are the different column data types and what information do they contain?\n   \n   The different column data types include contract_address, topic1, topic2, topic3, topic4, data, tx_hash, block_hash, block_number, block_time, index, and tx_index. They contain information such as the address of the contract that emitted the log, keccak256 hash of a flattened event declaration string, unindexed data containing further information on the event, the transaction hash of the transaction that produced this log, and the time when the block was mined that includes this log."
    },
    {
      "fileName": "index.md",
      "filePath": "docs/data-tables/raw/index.md",
      "url": "https://dune.com/docs/data-tables/raw/index.md",
      "summary": "# Raw Tables\n\nThe Raw Tables section of the Dune Docs project provides users with raw, unfiltered, and unedited data. This allows users to query for any transaction, block, event log, or trace across the blockchains that Dune supports. Raw data tables are particularly useful for obtaining meta information about the blockchain, a transaction, traces, or certain events.\n\nHowever, queries that have been written using raw data tables are notoriously hard to understand and audit due to the nature of the encoded data commonly found in these tables. Furthermore, the raw data tables have a very large number of rows and hence can be slow to query. Most of the time, users are better off submitting contracts for decoding and working with decoded data.\n\n## EVM Raw Table Data\n\nEthereum Virtual Machine (EVM) powers all chains in Dune except Solana and Bitcoin, meaning they share the base structure for underlying data. The following are the different types of EVM raw table data available in the Dune Docs project:\n\n- **Blocks**: Blocks are the building blocks of blockchains and rollups.\n- **Event Logs**: Event Logs are data that gets generated by smart contracts.\n- **Traces**: Traces contain information about the execution of smaller atomic actions generated by transactions.\n- **Transactions**: Transactions are cryptographically signed instructions from accounts.\n\nOverall, the Raw Tables section of the Dune Docs project provides users with a comprehensive guide on how to work with raw data tables. It also highlights the limitations of using raw data tables and suggests alternative methods for working with blockchain data. The section on EVM Raw Table Data provides users with a detailed explanation of the different types of raw data tables available for Ethereum Virtual Machine (EVM) and how they can be used.",
      "questions": "1. What types of blockchain data can be queried using raw tables in Dune Docs?\n- Raw tables in Dune Docs allow for querying of any transaction, block, event log, or trace across the blockchains that Dune supports.\n\n2. What are some challenges associated with using raw data tables for queries?\n- Queries written using raw data tables can be difficult to understand and audit due to the encoded data commonly found in these tables. Additionally, raw data tables can have a large number of rows and be slow to query.\n\n3. Which blockchains in Dune Docs are powered by the Ethereum Virtual Machine (EVM)?\n- All chains in Dune Docs except for Solana and Bitcoin are powered by the Ethereum Virtual Machine (EVM)."
    },
    {
      "fileName": "traces.md",
      "filePath": "docs/data-tables/raw/traces.md",
      "url": "https://dune.com/docs/data-tables/raw/traces.md",
      "summary": "# Traces\n\nThe Traces tables contain information about the execution of smaller atomic actions generated by transactions. Transactions can trigger smaller atomic actions that modify the internal state of an Ethereum Virtual Machine. Information about the execution of these actions is logged and can be found stored as an EVM execution trace, or just a trace. In Etherscan, these are referred to as \"internal transactions\". The guide provides information on the tables and column data of the traces.\n\n## Tables\n\nThe tables are divided into two engines, V1 and V2. The V2 engine uses Spark SQL, while the V1 engine uses PostgreSQL. The tables are divided by chain and contain information such as the value measured in wei, gas, gas used, block hash, success, tx index, sub-traces, error, tx success, tx hash, from, to, trace address, type, address, code, call type, input, and output. \n\n## Column Data\n\nThe column data provides a detailed description of the data types and their descriptions. For instance, the `block_time` column is of type `timestamptz` and represents the time when the block was mined. The `value` column is of type `numeric` and represents the amount of `[chain_gas_token]` sent in this transaction. The `gas` column is of type `numeric` and represents the gas provided with the message call. The `gas_used` column is of type `numeric` and represents the gas consumed by the transaction in wei. The `success` column is of type `boolean` and represents a true/false value that shows if the trace action succeeded. \n\n## Gas used in `.traces`\n\nThe `gas_used` column in the `.traces` tables is a bit hard to understand. The `gas_used` of a trace will always include the gas consumed by the trace and all its subtraces. The `gas_used` of the initial call will not contain the cost of making the call in the first place. You need to add 21000 gas units + the cost of sending zero + non-zero bytes to the `gas_used` value of the top trace to arrive at the \"true\" `gas_used` value. \n\n## Creation Traces\n\nThe creation traces table contains information about the creation of a smart contract and the transfer of ether to it. The table is divided by chain and contains information such as block time, block number, tx hash, address, from, and code. \n\nThe guide provides examples of the tables and column data. For instance, the guide provides an example of the V2 engine (Spark SQL) table for Ethereum Mainnet. The guide also provides an example of the creation traces table for Ethereum Mainnet. \n\nOverall, the guide provides a detailed explanation of the Traces tables and column data. It also provides examples of the tables and column data.",
      "questions": "1. What is the purpose of the `traces` tables in the different chains listed in the guide?\n- The `traces` tables contain information about the execution of smaller atomic actions generated by transactions in different chains listed in the guide.\n\n2. What is the difference between the V1 and V2 engines in terms of the PostgreSQL database used?\n- The V1 engine uses PostgreSQL while the V2 engine uses Spark SQL.\n\n3. What is the `gas_used` column in the `.traces` tables and how is it calculated?\n- The `gas_used` column in the `.traces` tables includes the gas consumed by the trace and all its subtraces, but not the cost of making the call in the first place. To arrive at the \"true\" `gas_used` value, 21000 gas units plus the cost of sending zero and non-zero bytes should be added to the `gas_used` value of the top trace."
    },
    {
      "fileName": "transactions.md",
      "filePath": "docs/data-tables/raw/transactions.md",
      "url": "https://dune.com/docs/data-tables/raw/transactions.md",
      "summary": "# Transactions\n\nThis section of the app technical guide covers transactions in the Ethereum network. Transactions are cryptographically signed instructions from accounts that initiate a transaction to update the state of the Ethereum network. Transactions always originate from externally owned accounts, and a smart contract cannot initiate a transaction. Transactions need to be broadcast to the whole network, and any node can broadcast a request for a transaction to be executed on the EVM. After this happens, a miner will execute the transaction and propagate the resulting state change to the rest of the network. \n\nThe official Ethereum documentation provides more information on transactions [here](https://ethereum.org/en/developers/docs/transactions).\n\n## Tables\n\nThis section of the app technical guide provides a table of the V2 Engine (Spark SQL) and V1 Engine (PostgreSQL) for different chains. The table lists the chain, table, and notes. \n\n### Example\n\nAn example of the table is shown below:\n\n|   Chain           |   Table               | Notes |\n| ----------------  | --------------------- | ----- |\n| Ethereum Mainnet  | `ethereum.transactions`     |  |\n| Gnosis Chain      | `gnosis.transactions`       |  |\n| Polygon           | `polygon.transactions`      |  |\n| Optimism          | `optimism.transactions`     | No EIP1559 so does not contain  `access_list`, `max_fee_per_gas`,`max_priority_fee_per_gas`, `priority_fee_per_gas` and `type` is always `Legacy` |\n| Optimism (legacy) | `optimism_legacy_ovm1.transactions` | No EIP1559 so does not contain  `access_list`, `max_fee_per_gas`,`max_priority_fee_per_gas`, `priority_fee_per_gas` and `type` is always `Legacy` |\n| BNB Chain         | `bnb.transactions`          | No EIP1559 so does not contain  `access_list`, `max_fee_per_gas`,`max_priority_fee_per_gas`, `priority_fee_per_gas` and `type` is always `Legacy` |\n| Arbitrum          | `arbitrum.transactions`     | No EIP1559 so does not contain  `access_list`, `max_fee_per_gas`,`max_priority_fee_per_gas`, `priority_fee_per_gas` and `type` is always `Legacy`. Gas is measured in `ArbGas` instead of `wei` |\n| Avalanche C-Chain  | `avalanche_c.transactions` | Does not contain. Gas is measured in `nanoavax` instead of `wei` |\n\n## Column Data\n\nThis section of the app technical guide provides a table of column data for transactions. The table lists the column, data type, and description. \n\n### Example\n\nAn example of the table is shown below:\n\n|  Column  **            |  Data type   |  Description                                                   |\n| -------------------------- | :-----------: | ---------------------------------------------------------------- |\n| `block_time`               | _timestamptz_ | The time when the block was mined that includes this transaction |\n| `block_number`             | _int8_        | The length of the blockchain in blocks                     |\n| `value`                      | _numeric_     | The amount of `[chain_gas_token]` sent in this transaction in `wei`. Note that ERC20 tokens do not show up here |\n| `gas_limit`                | _numeric_     | The gas limit in `wei` (ArbGas for Arbitrum) |\n| `gas_price`                | _numeric_     | The gas price in `wei`                                    |\n| `gas_used`                 | _numeric_     | The gas consumed by the transaction in `wei`              |\n| `max_fee_per_gas`          | _numeric_     | The maximum fee per gas the transaction sender is willing to pay total (introduced by [EIP1559](https://eips.ethereum.org/EIPS/eip-1559)) |\n| `max_priority_fee_per_gas` | _numeric_     | Maximum fee per gas the transaction sender is willing to give to miners to incentivize them to include their transaction (introduced by [EIP1559](https://eips.ethereum.org/EIPS/eip-1559)) |\n| `priority_fee_per_gas`     | _numeric_     | The priority fee paid out to the miner for this transaction (introduced by [EIP1559](https://eips.ethereum.org/EIPS/eip-1559)) |\n| `nonce`                    | _numeric_     | The transaction nonce, unique to that wallet               |\n| `index`                    | _numeric_     | The transactions index position in the block               |\n| `success`                  | _boolean_     | A true/false value that shows if the transaction succeeded |\n| `from`                     | _bytea_       | Address of the sender                                      |\n| `to`                       | _bytea_       | Address of the receiver. `null` when its a contract creation transaction |\n| `block_hash`               | _bytea_       | A unique identifier for that block                         |\n| `data`                     | _bytea_       | Can either be empty, a hex encoded message or instructions for a smart contract call |\n| `hash`                     | _bytea_       | The hash of the transaction                                |\n| `type`                     | _text_        | The type of the transaction: `Legacy`, `AccessList`, or `DynamicFee` |\n| `access_list`              | _jsonb_       | A list of addresses and storage keys the transaction intends to access. See [EIP2930](https://eips.ethereum.org/EIPS/eip-2930). Applicable if the transaction is of type `AccessList` or `DynamicFee` |\n| `effective_gas_price` | _numeric_      | [Arbitrum and Avalanche C-Chain only] The gas price this transaction paid in `wei` (Arbitrum) or `nanoavax` (Avalanche) |\n| `gas_used_for_l1` | _numeric_ | [Arbitrum only] The gas consumed by the L1 resources used for this transaction in ArbGas |\n| `l1_gas_used` | _numeric_ | [Optimism only] The costs to send the input `calldata` to L1 |\n| `l1_gas_price` | _numeric_ | [Optimism only] The gas price on L1 |\n| `l1_fee` | _numeric_ | [Optimism only] The amount in wei paid on L1  |\n| `l1_fee_scalar` | _numeric_ | [Optimism only] Variable parameter that makes sure that gas costs on L1 get covered + profits |\n| `l1_block_number` | _numeric_ | [Optimism only] The block_number of the block in which this transaction got batch settled on L1 |\n| `l1_timestamp` | _numeric_ | [Optimism only] The timestamp of the block in which this transaction got batch settled on L1 |\n| `l1_tx_origin` | _numeric_ | [Optimism only] ?? |\n\nThis table provides a detailed description of the column data for transactions. It lists the column name, data type, and description. The column data includes information such as the time when the block was mined that includes this transaction, the length of the blockchain in blocks, the amount of `[chain_gas_token]` sent in this transaction in `wei`, the gas limit in `wei` (ArbGas for Arbitrum), the gas price in `wei`, the gas consumed by the transaction in `wei`, the maximum fee per gas the transaction sender is willing to pay total (introduced by EIP1559), the maximum fee per gas the transaction sender is willing to give to miners to incentivize them to include their transaction (introduced by EIP1559), the priority fee paid out to the miner for this transaction (introduced by EIP1559), the transaction nonce, unique to that wallet, the transactions index position in the block, a true/false value that shows if the transaction succeeded, the address of the sender, the address of the receiver (null when it's a contract creation transaction), a unique identifier for that block, and more. \n\nOverall, this section of the app technical guide provides a detailed description of transactions in the Ethereum network, including tables and column data.",
      "questions": "1. What is the purpose of the Transactions table in this app and what data does it contain?\n- The Transactions table contains data on transactions from various blockchain networks, including Ethereum Mainnet, Polygon, and BNB Chain, among others. It includes information such as the block time, block number, gas limit, gas price, gas used, and transaction hash, among others.\n2. Does this app support EIP1559 and how is it reflected in the Transactions table?\n- The app supports EIP1559, but not all blockchain networks included in the Transactions table have implemented it. For networks that have implemented it, the Transactions table includes columns for `max_fee_per_gas`, `max_priority_fee_per_gas`, and `priority_fee_per_gas`.\n3. How does this app handle gas measurement for different blockchain networks?\n- Gas measurement varies across different blockchain networks, and the Transactions table reflects this by using different units of measurement such as `wei`, `ArbGas`, and `nanoavax`. The table also includes columns such as `effective_gas_price` and `gas_used_for_l1` to account for gas measurement differences in specific networks like Arbitrum."
    }
  ],
  "folders": [
    {
      "folderName": "bitcoin",
      "folderPath": "docs/data-tables/raw/bitcoin",
      "url": "https://dune.com/docs/data-tables/raw/bitcoin",
      "files": [
        {
          "fileName": "blocks.md",
          "filePath": "docs/data-tables/raw/bitcoin/blocks.md",
          "url": "https://dune.com/docs/data-tables/raw/bitcoin/blocks.md",
          "summary": "The Blocks section of the app technical guide covers the `bitcoin.blocks` feature of the project. This feature provides information about Bitcoin blocks, including their time, height, date, hash, transaction count, size, and various other details. \n\nThe guide provides a table with a detailed breakdown of each column in the `bitcoin.blocks` feature, including the column name, column type, and a description of what each column represents. For example, the `time` column represents the block time, while the `height` column represents the block number. \n\nThis information is useful for developers who are working with Bitcoin blocks and need to access specific details about them. For example, a developer building a Bitcoin wallet app might use this feature to display information about recent Bitcoin blocks to their users. \n\nOverall, the Blocks section of the app technical guide provides a comprehensive overview of the `bitcoin.blocks` feature, making it easier for developers to understand and use this feature in their projects.",
          "questions": "1. What is the purpose of the `bitcoin.blocks` table in this app? \n- The `bitcoin.blocks` table contains information about individual blocks in the Bitcoin blockchain, including their height, hash, transaction count, and various other metrics.\n\n2. How is the `total_reward` column calculated? \n- The `total_reward` column represents the static reward given to the miner and is calculated as the sum of the outputs in the coinbase transaction (the first transaction).\n\n3. What is the significance of the `difficulty` column? \n- The `difficulty` column represents the estimated amount of work done to find this block relative to the estimated amount of work done to find block 0. It is a measure of the level of difficulty in mining the block and is used to adjust the mining difficulty level of the network."
        },
        {
          "fileName": "index.md",
          "filePath": "docs/data-tables/raw/bitcoin/index.md",
          "url": "https://dune.com/docs/data-tables/raw/bitcoin/index.md",
          "summary": "# App Technical Guide: Bitcoin\n\nThis guide provides information on how to work with Bitcoin data in the Dune Docs project. Bitcoin is a non-EVM chain, and its raw data looks different from other chains. The guide covers the available data and how to access it.\n\n## Data Available\n\nThis section lists the types of Bitcoin data available in the Dune Docs project. The data is organized into four categories:\n\n- Blocks: This page provides information on Bitcoin blocks, including their height, hash, and timestamp. It also includes data on the number of transactions and the total fees.\n- Transactions: This page provides information on Bitcoin transactions, including their hash, size, and fee. It also includes data on the number of inputs and outputs.\n- Outputs: This page provides information on Bitcoin outputs, including their value and script.\n- Inputs: This page provides information on Bitcoin inputs, including their previous output and script.\n\nEach page provides detailed information on the data available, as well as examples of how to query the data using the Dune Analytics platform.\n\n## Additional Resources\n\nThis guide also includes a link to a full written guide on getting started with Bitcoin data analysis. The guide provides additional information on how to analyze Bitcoin data using the Dune Analytics platform.\n\nOverall, this guide is a useful resource for anyone looking to work with Bitcoin data in the Dune Docs project. It provides a clear overview of the available data and how to access it, as well as additional resources for further learning.",
          "questions": "1. What kind of data is available for analysis in this app?\n- The app technical guide lists blocks, transactions, outputs, and inputs as available data for analysis.\n\n2. Is this app specifically designed for analyzing Bitcoin data or can it be used for other blockchain data as well?\n- The title and description of the app technical guide suggest that it is specifically designed for analyzing Bitcoin data.\n\n3. Are there any specific tools or programming languages required to use this app?\n- The app technical guide does not mention any specific tools or programming languages required to use this app."
        },
        {
          "fileName": "inputs.md",
          "filePath": "docs/data-tables/raw/bitcoin/inputs.md",
          "url": "https://dune.com/docs/data-tables/raw/bitcoin/inputs.md",
          "summary": "# Inputs\n\nThe `Inputs` section of the app technical guide covers the `bitcoin.inputs` feature of the project. This feature provides a table with detailed information about the inputs of a Bitcoin transaction. The table includes columns such as `block_time`, `block_date`, `block_height`, `index`, `tx_id`, `spent_block_height`, `spent_tx_id`, `spent_output_number`, `value`, `address`, `type`, `coinbase`, `is_coinbase`, `script_asm`, `script_hex`, `script_desc`, `script_signature_asm`, `script_signature_hex`, `sequence`, and `witness_data`.\n\nEach column is described in detail, including its data type and a brief explanation of its purpose. For example, the `block_time` column contains a timestamp of when the block was mined, while the `value` column contains the number of Satoshis attached to the input. The `address` column contains the address that owned or owns the output used as input, and the `type` column contains the address type of the input.\n\nThe `Inputs` section is useful for developers who need to access detailed information about Bitcoin transactions. For example, a developer building a Bitcoin wallet app might use this feature to display transaction details to the user. \n\nExample usage:\n```python\nimport dune_docs\n\ninputs_table = dune_docs.bitcoin.inputs\nprint(inputs_table.head())\n```\nThis code imports the `dune_docs` module and accesses the `bitcoin.inputs` feature. It then prints the first few rows of the table using the `head()` method.",
          "questions": "1. What is the purpose of this app and how does it relate to blockchain technology?\n- The app is not explicitly stated in the provided technical guide, so a blockchain SQL analyst might need more information on the context and use case of the app to understand its relevance to blockchain technology.\n\n2. How is the data in the `bitcoin.inputs` table sourced and updated?\n- The technical guide does not provide information on the data source or update frequency of the `bitcoin.inputs` table, which could be important for a blockchain SQL analyst to understand the reliability and timeliness of the data.\n\n3. Are there any limitations or known issues with the app's handling of bitcoin input data?\n- The technical guide does not mention any potential issues or limitations with the app's handling of bitcoin input data, but a blockchain SQL analyst might want to know if there are any known bugs or edge cases that could affect the accuracy or completeness of the data."
        },
        {
          "fileName": "outputs.md",
          "filePath": "docs/data-tables/raw/bitcoin/outputs.md",
          "url": "https://dune.com/docs/data-tables/raw/bitcoin/outputs.md",
          "summary": "The Outputs section of the app technical guide for the Dune Docs project provides a detailed description of the `bitcoin.outputs` table. This table contains information about the outputs of Bitcoin transactions, including the block time, block date, block height, block hash, transaction ID, output index, value, script ASM, script hex, address, and address type. \n\nThe purpose of this section is to provide developers with a clear understanding of the data contained in the `bitcoin.outputs` table and how it can be used in the Dune Docs app. For example, developers can use this table to track the movement of Bitcoin between addresses, analyze transaction patterns, and identify potential fraud or money laundering activities.\n\nEach column in the table is described in detail, including the data type, description, and any relevant examples. For instance, the `value` column contains the number of Satoshis attached to each output, which can be used to calculate the total value of a transaction. The `address` column contains the address that owns each output, which can be used to track the movement of Bitcoin between addresses.\n\nOverall, the Outputs section of the app technical guide provides developers with a comprehensive overview of the `bitcoin.outputs` table and its role in the Dune Docs app. By understanding the data contained in this table, developers can build more powerful and effective tools for analyzing Bitcoin transactions.",
          "questions": "1. What data source does this app technical guide pull from to populate the `bitcoin.outputs` table? \n   - This information is not provided in the app technical guide and would require further investigation or clarification from the developers.\n2. Can this app technical guide be used to track outputs for other cryptocurrencies besides Bitcoin? \n   - Again, this information is not provided in the app technical guide and would require further investigation or clarification from the developers.\n3. Are there any limitations or known issues with the data provided in the `bitcoin.outputs` table? \n   - This information is not provided in the app technical guide and would require further investigation or clarification from the developers."
        },
        {
          "fileName": "transactions.md",
          "filePath": "docs/data-tables/raw/bitcoin/transactions.md",
          "url": "https://dune.com/docs/data-tables/raw/bitcoin/transactions.md",
          "summary": "# Transactions\n\nThe Transactions section of the Dune Docs project provides a detailed guide on the `bitcoin.transactions` feature. The guide contains a table with column names, types, and descriptions of the data that can be accessed through this feature. The table includes information such as the block time, block date, block height, block hash, index, ID, input value, output value, fee, input count, output count, size, virtual size, whether the transaction is a coinbase transaction, and the transaction encoded as hexadecimal.\n\nThe guide also provides definitions for the `input`, `input.script_signature`, `input.script_pub_key`, `output`, and `output.script_pub_key` fields. These fields are of type `STRUCT` and allow for representing nested hierarchical data with key-value pairs. The `input` field contains information about transaction inputs, such as the number of Satoshis attached to the output, the height of the output, the transaction ID of the output, the number of the output in the transaction's outputs, and the script signature and public key. The `output` field contains information about transaction outputs, such as the number of Satoshis attached to the output, the public key, and the index of the output within a transaction.\n\nThe guide notes that the `input` field is an `array(row(map))` type, and provides examples of how to work with the columns using syntax such as `input[1].witness_data[2]` or `input[3].script_pub_key.address`, depending on the lengths of arrays within each value.\n\nOverall, the Transactions section of the Dune Docs project provides a comprehensive guide to the `bitcoin.transactions` feature, including detailed information on the data that can be accessed and how to work with the nested hierarchical data types.",
          "questions": "1. What data source does this app technical guide pull from to populate the `bitcoin.transactions` table?\n- The app technical guide does not provide information on the data source used to populate the `bitcoin.transactions` table.\n\n2. Can this app technical guide be used to query transactions from other cryptocurrencies besides Bitcoin?\n- The app technical guide does not provide information on whether it can be used to query transactions from other cryptocurrencies besides Bitcoin.\n\n3. How can the `input` and `output` fields be used to track the flow of funds in a Bitcoin transaction?\n- The `input` and `output` fields can be used to track the flow of funds in a Bitcoin transaction by providing information on the value, height, transaction ID, output number, coinbase data, sequence number, witness data, script signature, and script public key for each input and output."
        }
      ],
      "folders": [],
      "summary": "The `docs/data-tables/raw/bitcoin` folder in the Dune Docs project focuses on providing comprehensive guides for working with raw Bitcoin data. This data is organized into four main categories: Blocks, Transactions, Outputs, and Inputs. Each category has a dedicated markdown file that explains the respective feature in detail, including the available data, data types, and how to access and use the data in the Dune Docs app.\n\nFor example, the `blocks.md` file covers the `bitcoin.blocks` feature, which provides information about Bitcoin blocks, such as their time, height, date, hash, transaction count, and size. Developers working with Bitcoin blocks can use this feature to display information about recent Bitcoin blocks in their applications, such as a Bitcoin wallet app.\n\nSimilarly, the `transactions.md` file provides a detailed guide on the `bitcoin.transactions` feature, which contains information about Bitcoin transactions, including their hash, size, fee, and the number of inputs and outputs. The guide also explains how to work with nested hierarchical data types, such as `input` and `output` fields, which can be useful for developers analyzing transaction patterns or tracking the movement of Bitcoin between addresses.\n\nThe `outputs.md` file focuses on the `bitcoin.outputs` table, which contains information about the outputs of Bitcoin transactions. This table can be used to analyze transaction patterns, track the movement of Bitcoin between addresses, and identify potential fraud or money laundering activities.\n\nLastly, the `inputs.md` file covers the `bitcoin.inputs` feature, which provides a table with detailed information about the inputs of a Bitcoin transaction. Developers can use this feature to display transaction details to users in applications like a Bitcoin wallet app.\n\nOverall, the guides in this folder provide a clear understanding of the raw Bitcoin data available in the Dune Docs project and how to access and use it effectively. By following these guides, developers can build powerful tools for analyzing Bitcoin transactions and blocks, which can be useful in various applications and projects.",
      "questions": ""
    },
    {
      "folderName": "solana",
      "folderPath": "docs/data-tables/raw/solana",
      "url": "https://dune.com/docs/data-tables/raw/solana",
      "files": [
        {
          "fileName": "account-activity.md",
          "filePath": "docs/data-tables/raw/solana/account-activity.md",
          "url": "https://dune.com/docs/data-tables/raw/solana/account-activity.md",
          "summary": "# Account Activity\n\nThis section of the app technical guide covers the `Solana.account_activity` table, which contains information from the transactions table focused on account usage. Each row in the table contains all information about an account's usage in a transaction. The purpose of this table is to provide a detailed view of how an account is being used in the Solana blockchain.\n\nThe table contains several columns, each with a specific purpose. The `block_slot` column contains the slot of the block in which the transaction occurred. The `block_hash` column contains the hash of the block in which the transaction occurred. The `block_time` column contains the timestamp of when the account usage occurred. The `block_date` column contains the date of when the account usage occurred. The `address` column contains the address of the account, also referred to as the public key. The `tx_index` column contains the index of the transaction in the block. The `tx_id` column contains the ID of the transaction in which the account usage occurred. The `tx_success` column indicates whether the transaction succeeded and was committed. The `signed` column indicates whether this account signed the transaction. The `writeable` column indicates whether this account was granted read-write access in the transaction. The `pre_balance` column contains the balance of the account before the transaction was processed. The `pre_token_balance` column contains the token balance before the transaction was processed. The `post_balance` column contains the balance of the account after the transaction was processed. The `post_token_balance` column contains the token balance after the transaction was processed. The `balance_change` column contains the balance change that occurred as part of the transaction. The `token_balance_change` column contains the token balance change that occurred as part of the transaction. The `token_mint_address` column contains the address the associated token address is minting from (i.e. the actual token address). The `token_owner_address` column contains the address that owns this token address.\n\nAn example use case for this table would be to track the usage of a specific account over time. By analyzing the data in this table, developers can gain insights into how an account is being used and make informed decisions about how to optimize their application. For example, if an account is being used frequently and experiencing high traffic, developers may want to consider optimizing the account to handle the increased load.",
          "questions": "1. What blockchain platform is this app technical guide for?\n- The app technical guide is for the Solana blockchain platform.\n\n2. What specific account information is included in the Solana.account_activity table?\n- The Solana.account_activity table contains information about an account's usage in a transaction, including the account's address, pre- and post-transaction balances, and token balances.\n\n3. What is the purpose of the token_mint_address and token_owner_address columns?\n- The token_mint_address column indicates the address from which the associated token is being minted, while the token_owner_address column indicates the address that owns the token address. This information can be useful for tracking token ownership and usage."
        },
        {
          "fileName": "blocks.md",
          "filePath": "docs/data-tables/raw/solana/blocks.md",
          "url": "https://dune.com/docs/data-tables/raw/solana/blocks.md",
          "summary": "# Blocks\n\n## Solana.blocks\n\nThis section of the app technical guide covers the `Solana.blocks` table, which contains block data within Solana's blockchain. The purpose of this table is to identify block activity and transaction changes over time. The table includes several columns such as `hash`, `height`, `slot`, `time`, `date`, `parent_slot`, `previous_block___hash`, `total_transactions`, `successful_transactions`, and `failed_transactions`. Each column has a specific data type and description, which is explained in the table.\n\nFor example, the `hash` column is a string that represents the hash of the block, base-58 encoded. The `height` column is a bigint that represents the number of blocks beneath this block. The `time` column is a timestamp that represents the estimated time this block was produced. The `total_transactions` column is a bigint that represents the total number of transactions in this block. The `successful_transactions` column is a bigint that represents the number of successful transactions in this block. The `failed_transactions` column is a bigint that represents the number of failed transactions in this block.\n\nThe guide also provides two Solana Query examples that can be used with the `Solana.blocks` table. The first example is \"Solana blocks over time,\" which can be found at [https://dune.xyz/queries/389979](https://dune.xyz/queries/389979). This query shows the number of blocks produced over time. The second example is \"Transactions per day,\" which can be found at [https://dune.xyz/queries/390045](https://dune.xyz/queries/390045). This query shows the number of transactions produced per day.\n\nOverall, this section of the app technical guide provides a detailed explanation of the `Solana.blocks` table and its columns. It also provides useful examples of Solana Queries that can be used with this table.",
          "questions": "1. What is the purpose of the `hash` column in the `Solana.blocks` table?\n- The `hash` column in the `Solana.blocks` table contains the hash of each block in Solana's blockchain, encoded in base-58. A blockchain SQL analyst might want to know how this hash is generated and how it is used within the blockchain.\n\n2. How can the `Solana.blocks` table be used to analyze transaction activity over time?\n- The `Solana.blocks` table can be used to identify block activity and transaction changes over time. A blockchain SQL analyst might want to know how to join this table with other tables in order to analyze transaction activity in more detail.\n\n3. Are there any limitations to the data provided in the `Solana.blocks` table?\n- The `Solana.blocks` table provides information on the number of successful and failed transactions in each block, but it does not provide details on the specific transactions themselves. A blockchain SQL analyst might want to know if there are any other limitations to the data provided in this table, and if there are other tables or data sources that can be used to supplement this information."
        },
        {
          "fileName": "index.md",
          "filePath": "docs/data-tables/raw/solana/index.md",
          "url": "https://dune.com/docs/data-tables/raw/solana/index.md",
          "summary": "# Solana Technical Guide\n\nThis technical guide provides information on Solana's raw data and how it differs from other chains. The guide is divided into two main sections: Data Available and Changelog.\n\n## Data Available\n\nThis section provides a list of tables available in Solana's data. The tables are:\n\n- Account Activity: This table contains information from the transactions table focused on account usage.\n- Blocks: Blocks are the building blocks of blockchains and rollups.\n- Rewards: This table contains data about rewards paid out on Solana.\n- Transactions: Transactions are cryptographically signed instructions from accounts.\n- Vote Transactions: This table contains the full set of vote transactions that are submitted by validators to vote on a block.\n\n## Changelog\n\nThis section provides a list of changes made to Solana's data. The changes are:\n\n### 2022-03-25\n\nThe `solana.account_activity` table has been updated to a new version. The new version of the table contains additional information around token activity. The following columns were added to the table:\n\n- `pre_token_balances`: The token balance before the transaction was processed.\n- `post_token_balances`: The token balance after the transaction was processed.\n- `token_balance_changes`: The balance change that occurred as part of the transaction.\n\n### 2022-03-18\n\nThe `solana.account_activity` table was released. The table contains all of the information about an account’s usage in a transaction. The table is optimized to run with ‘WHERE address = …’ queries.\n\n### 2022-03-01\n\nThe `solana.transactions` table has been upgraded to a new version. The new version of the table uses cleaner array structs to make it easier to extract useful information. The vote transactions have also been split into their own table `solana.vote_transactions`, so queries using `solana.transactions` will have better performance. Unfortunately, the table change also means that some existing queries will now break and need to be changed.\n\nThe changes made to the `solana.transactions` table are:\n\n- You won't need to check if a transaction is a vote transaction, which has typically been done with `WHERE ARRAY_CONTAINS(account_keys, \"Vote111111111111111111111111111111111111111\") = false`.\n- The `error_index` and `error_message` columns have been removed, and have been merged into the `error` column (which is a struct). So now instead of `WHERE error_index is not null`, a query should do `WHERE error is not null`.\n- Structs containing indexes to `account_keys` now include the account address directly, so there is no need to use the `account_keys` column to look up the account addresses.\n- The `pre_token_balances` and `post_token_balances` columns have changed. The token balance is now included in the field `amount`. And as mentioned above, the struct in the array now has a field `account`, which is the account of the token balance.\n- The `instructions` column has changed. As mentioned above, the struct in the array now has a field `executing_account`, which is the account executing the instruction.\n- The `inner_instructions` column is removed, and inner instructions have been moved into the `instructions` column.\n\nIn summary, this technical guide provides information on Solana's raw data and the available tables. It also highlights the changes made to the `solana.account_activity` and `solana.transactions` tables. The guide is useful for developers who want to work with Solana's data and need to understand the changes made to the tables.",
          "questions": "1. What is Solana and how does it differ from other chains?\n- Solana is a non-EVM chain and its raw data looks different from other chains. \n\n2. What data is available in Solana and what information does each table contain?\n- Solana has several tables available, including account activity, blocks, rewards, transactions, and vote transactions. Each table contains specific data related to its name.\n\n3. What changes were made to the Solana tables in the latest update and how might this affect existing queries?\n- The latest update added new columns to the `solana.account_activity` table and split vote transactions into their own table. Existing queries may need to be updated to reflect changes in column names and structures."
        },
        {
          "fileName": "rewards.md",
          "filePath": "docs/data-tables/raw/solana/rewards.md",
          "url": "https://dune.com/docs/data-tables/raw/solana/rewards.md",
          "summary": "# Rewards\n\nThis section of the app technical guide covers the `Solana.rewards` table, which contains data about rewards paid out on Solana. The table is structured such that each row corresponds to one reward, and one block may contain zero or more rewards. The purpose of this table is to provide information about rewards paid out on the Solana blockchain, which can be useful for analyzing trends and patterns in reward distribution.\n\nThe table contains several columns, each with a specific purpose. The `block_slot` column contains the block's slot index in the ledger, while the `block_hash` column contains the hash of the block, base-58 encoded. The `block_time` column contains the estimated time the block was produced, and the `block_date` column contains the date of the event. The `commission` column contains the vote account commission when the reward was credited, only present for voting and staking rewards. The `lamports` column contains the number of reward lamports credited or debited by the account, while the `pre_balance` column contains the account balance in lamports before the reward was applied. The `post_balance` column contains the account balance in lamports after the reward was applied, and the `recipient` column contains the public key, as a base-58 encoded string, of the account that received the reward. Finally, the `reward_type` column contains the type of reward, which can be \"fee\", \"rent\", \"voting\", or \"staking\".\n\nAn example query for this table is provided in the guide, which shows how to retrieve the Solana rewards fee per day. This query can be useful for analyzing the distribution of rewards over time and identifying any trends or patterns in reward distribution.\n\nOverall, this section of the app technical guide provides a detailed overview of the `Solana.rewards` table, including its purpose, structure, and columns. It also provides an example query to demonstrate how the table can be used to analyze reward distribution on the Solana blockchain.",
          "questions": "1. What is the purpose of the Solana.rewards table?\n    \n    The Solana.rewards table contains data about rewards paid out on Solana, with each row corresponding to one reward. It includes information such as the block slot, block hash, block time, commission, lamports, pre and post balance, recipient, and reward type.\n\n2. What types of rewards are included in the reward_type column?\n    \n    The reward_type column includes four types of rewards: \"fee\", \"rent\", \"voting\", and \"staking\". The commission column is also present for voting and staking rewards.\n\n3. Are there any limitations or restrictions on the data included in the Solana.rewards table?\n    \n    The app technical guide does not provide information on any limitations or restrictions on the data included in the Solana.rewards table. It is possible that a blockchain SQL analyst may have additional questions or concerns about the accuracy or completeness of the data."
        },
        {
          "fileName": "transactions.md",
          "filePath": "docs/data-tables/raw/solana/transactions.md",
          "url": "https://dune.com/docs/data-tables/raw/solana/transactions.md",
          "summary": "# Transactions\n\nThe Transactions section of the Dune Docs project provides a technical guide for the Solana.transactions table, which contains transaction data within Solana's blockchain. The table includes relevant data related to account, protocol, and program activity. The guide provides a detailed description of each column in the table, including the column name, column type, and description. \n\nThe guide also includes query examples that demonstrate how to extract data from the table. For example, the guide provides a query that shows NFT transactions of popular programs in the past seven days and an overview of the drift-protocol. \n\nThe guide also includes definitions for several data types used in the table, including STRUCT, which allows for representing nested hierarchical data and has key-value pairs. The guide provides examples of how to use these data types to extract data from the table. \n\nThe guide also includes definitions for several struct types used in the table, including token_balance, instructions, inner_instructions, and error. Each struct type includes a field, data type, and description. \n\nOverall, the Transactions section of the Dune Docs project provides a comprehensive technical guide for the Solana.transactions table, including detailed descriptions of each column and struct type, as well as query examples that demonstrate how to extract data from the table.",
          "questions": "1. What is the purpose of the Solana.transactions table?\n   \n   The Solana.transactions table contains transaction data within Solana's blockchain, including relevant data related to account, protocol, and program activity.\n\n2. What is the data type of the token_balance field in the Struct definitions?\n   \n   The data type of the token_balance field in the Struct definitions is Decimal.\n\n3. How can the STRUCT data type be used to group fields together?\n   \n   The STRUCT data type can be used to group fields together to make them more accessible, similar to a dictionary in Python."
        },
        {
          "fileName": "vote-transactions.md",
          "filePath": "docs/data-tables/raw/solana/vote-transactions.md",
          "url": "https://dune.com/docs/data-tables/raw/solana/vote-transactions.md",
          "summary": "# Vote Transactions\n\nThe Vote Transactions section of the Dune Docs project focuses on the Solana.vote_transactions table, which contains the full set of vote transactions submitted by validators to vote on a block. This table can be joined with the non-vote transactions table to get a full breakdown of all transactions. The schema of the Solana.vote_transactions table is the same as the main transactions table.\n\nThe guide provides a detailed description of each column in the Solana.vote_transactions table, including the column name, column type, and description. Some of the columns include block_slot, which is the block's slot index in the ledger, block_time, which is the estimated time the block was produced, and fee, which is the fee charged for the transaction. The guide also includes examples of queries that can be run on the Solana.vote_transactions table, such as the Solana transactions past 30 days query available on Dune.xyz.\n\nOverall, the Vote Transactions section of the Dune Docs project provides a comprehensive guide to the Solana.vote_transactions table, including its schema and how it can be used to analyze vote transactions submitted by validators. This information is useful for developers and analysts working with Solana.vote_transactions and looking to gain a deeper understanding of its structure and contents.",
          "questions": "1. What is the purpose of the dune docs app and how does it relate to blockchain technology?\n- The app technical guide does not provide information on the purpose of the dune docs app, so a blockchain SQL analyst may need to seek additional documentation or context. \n\n2. How does the Solana.vote_transactions table differ from the non-vote transactions table mentioned in the guide?\n- The guide mentions that the Solana.vote_transactions table contains only vote transactions submitted by validators to vote on a block, while the non-vote transactions table contains a full breakdown of all transactions. A blockchain SQL analyst may want to know more about the schema and contents of the non-vote transactions table.\n\n3. Can the instructions column in the Solana.vote_transactions table be used to track specific actions taken by validators during the voting process?\n- The guide mentions that the instructions column contains a list of instructions to execute in order, but it does not provide information on what those instructions may be. A blockchain SQL analyst may want to know if the instructions can be used to track specific actions taken by validators during the voting process."
        }
      ],
      "folders": [],
      "summary": "The `docs/data-tables/raw/solana` folder contains a comprehensive technical guide for working with Solana's raw data tables. These tables provide valuable insights into various aspects of the Solana blockchain, such as account activity, blocks, rewards, transactions, and vote transactions. This guide is essential for developers and analysts who want to work with Solana's data and understand the structure and contents of these tables.\n\nThe `account-activity.md` file covers the `Solana.account_activity` table, which contains information about account usage in transactions. This table can be used to track the usage of a specific account over time and optimize applications based on account activity patterns.\n\nThe `blocks.md` file provides information on the `Solana.blocks` table, which contains block data within Solana's blockchain. This table can be used to identify block activity and transaction changes over time. The guide also provides Solana Query examples that can be used with the `Solana.blocks` table.\n\nThe `index.md` file serves as an overview of the Solana Technical Guide, providing information on Solana's raw data and how it differs from other chains. It also highlights the changes made to the `solana.account_activity` and `solana.transactions` tables, making it useful for developers who need to understand the updates made to these tables.\n\nThe `rewards.md` file covers the `Solana.rewards` table, which contains data about rewards paid out on Solana. This table can be used to analyze trends and patterns in reward distribution, providing valuable insights into the Solana blockchain's reward system.\n\nThe `transactions.md` file provides a technical guide for the `Solana.transactions` table, which contains transaction data within Solana's blockchain. The guide includes detailed descriptions of each column and struct type, as well as query examples that demonstrate how to extract data from the table.\n\nFinally, the `vote-transactions.md` file focuses on the `Solana.vote_transactions` table, which contains the full set of vote transactions submitted by validators to vote on a block. This table can be joined with the non-vote transactions table to get a full breakdown of all transactions, providing a comprehensive view of validator voting activity on the Solana blockchain.\n\nOverall, the guide in this folder offers a detailed understanding of Solana's raw data tables and their usage. It is an invaluable resource for developers and analysts working with Solana data, providing examples and explanations that can help them make informed decisions and optimize their applications based on the insights gained from these tables.",
      "questions": ""
    }
  ],
  "summary": "The `docs/data-tables/raw` folder in the Dune Docs project focuses on providing comprehensive guides for working with raw, unfiltered, and unedited data from various blockchains, including Ethereum, Bitcoin, and Solana. This raw data is organized into different categories such as Blocks, Transactions, Event Logs, and Traces. Each category has a dedicated markdown file that explains the respective feature in detail, including the available data, data types, and how to access and use the data in the Dune Docs app.\n\nFor example, the `blocks.md` file covers the concept of blocks in blockchains and rollups, providing tables and column data that are useful for identifying block activity and transaction changes over time. Developers working with blockchain data can use this guide to understand how blocks work in the context of the Dune Docs project and extract valuable insights from the data.\n\nSimilarly, the `event-logs.md` file provides a detailed guide on the `Event Logs` tables that store all logs data generated by smart contracts. This guide is essential for developers who want to work with event logs and understand the structure and contents of these tables.\n\nThe `traces.md` file focuses on the Traces tables, which contain information about the execution of smaller atomic actions generated by transactions. This guide is useful for developers analyzing transaction patterns or tracking the movement of assets between addresses.\n\nLastly, the `transactions.md` file covers transactions in the Ethereum network, including tables and column data. This guide is essential for developers who want to work with transaction data and understand the structure and contents of these tables.\n\nIn addition to the Ethereum-focused guides, this folder also contains subfolders for Bitcoin and Solana, providing detailed guides for working with raw data from these blockchains.\n\nOverall, the guides in this folder provide a clear understanding of the raw data available in the Dune Docs project and how to access and use it effectively. By following these guides, developers can build powerful tools for analyzing blockchain transactions and blocks, which can be useful in various applications and projects.",
  "questions": ""
}
