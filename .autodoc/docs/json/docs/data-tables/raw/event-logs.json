{
  "fileName": "event-logs.md",
  "filePath": "docs/data-tables/raw/event-logs.md",
  "url": "https://dune.com/docs/data-tables/raw/event-logs.md",
  "summary": "# Event Logs\n\nThis guide covers the `Event Logs` tables that store all logs data generated by smart contracts. The logs are an elegant way to store tiny amounts of data on EVM blockchains for a small amount of gas. Specifically, event logs are useful to let other people know something has happened without them having to query contracts individually. The guide provides a list of tables for the V2 Engine (Spark SQL) and V1 Engine (PostgreSQL) for different chains. \n\nThe `Tables` section of the guide provides a list of tables for the V2 Engine (Spark SQL) and V1 Engine (PostgreSQL) for different chains. The tables are named after the chain they belong to and contain logs data generated by smart contracts. The tables are useful for querying contracts that are not yet decoded or are not able to be decoded since the code of the smart contract is not public. \n\nThe `Column Data` section of the guide provides a description of the columns in the `Event Logs` tables. The columns include `contract_address`, `topic1`, `topic2`, `topic3`, `topic4`, `data`, `tx_hash`, `block_hash`, `block_number`, `block_time`, `index`, and `tx_index`. The columns contain information such as the address of the contract that emitted the log, keccak256 hash of a flattened event declaration string, unindexed data containing further information on the event, the transaction hash of the transaction that produced this log, and the time when the block was mined that includes this log. \n\nFor more information on this topic, the guide provides a link to an article on understanding event logs on the Ethereum blockchain. \n\nExample:\n```\n|   Chain           |   Table             | Notes |\n| ----------------  | ------------------- | ----- |\n| Ethereum Mainnet  | `ethereum.logs`     |       |\n| Gnosis Chain      | `gnosis.logs`       |       |\n| Polygon           | `polygon.logs`      |       |\n| Optimism          | `optimism.logs`     |       |\n| Optimism (legacy) | `optimism_legacy_ovm1.logs` |       |\n| BNB Chain         | `bnb.logs`          |       |\n| Arbitrum          | `arbitrum.logs`     |       |\n| Avalanche C-Chain  | `avalanche_c.logs` |       |\n```\nThe above example shows the tables for the V2 Engine (Spark SQL) for different chains. \n\n```\n|   Chain              |   Table         | Notes |\n| -------------------  | --------------- | ----- |\n| Ethereum Mainnet     | `ethereum.logs` |       |\n| Gnosis Chain (xDai)  | `xdai.logs`     |       |\n| Polygon              | `polygon.logs`  |       |\n| Optimism (OVM 1 & 2) | `optimism.logs` |       |\n| BNB Chain (BSC)      | `bsc.logs`      |       |\n```\nThe above example shows the tables for the V1 Engine (PostgreSQL) for different chains. \n\n### Column Data\n\n|   Column name      |   Data type     |    Description   |\n| ------------------ | :------------: | -------------------------------------------------------------- |\n| `contract_address` | _bytea_        | The address of the contract that emitted the log               |\n| `topic1`           | _bytea_        | keccak256 hash of a flattened event declaration string         |\n| `topic2`           | _bytea_        | Second indexed `topic` of the event                            |\n| `topic3`           | _bytea_        | Third indexed `topic` of the event                             |\n| `topic4`           | _bytea_        | Fourth indexed `topic` of the event                            |\n| `data`             | _bytea_        | Unindexed data containing further information on the event     |\n| `tx_hash`          | _bytea_        | The transaction hash of the transaction that produced this log |\n| `block_hash`       | _bytea_        | A unique identifier for that block                             |\n| `block_number`     | _int8_         | The length of the blockchain in blocks                         |\n| `block_time`       | _timestamptz_  | The time when the block was mined that includes this log       |\n| `index`            | _numeric_      | This logs index position in the block (cumulative amount of logs ordered by execution) |\n| `tx_index`         | _numeric_      | The index position of the transaction in this block (cumulative amount of transactions ordered by execution) |\n\nThe above example shows the columns in the `Event Logs` tables.",
  "questions": "1. What is the purpose of the Event Logs tables in this app and how are they useful for blockchain analysis?\n   \n   The Event Logs tables store all logs data generated by smart contracts and can be useful for querying contracts that are not yet decoded or are not able to be decoded since the code of the smart contract is not public. They are also useful for letting other people know something has happened without them having to query contracts individually.\n\n2. What engines are used to store the data in the tables and what chains are supported by each engine?\n   \n   The V2 Engine (Spark SQL) is used to store data in the tables and supports Ethereum Mainnet, Gnosis Chain, Polygon, Optimism, Optimism (legacy), BNB Chain, and Avalanche C-Chain. The V1 Engine (PostgreSQL) is also used and supports Ethereum Mainnet, Gnosis Chain (xDai), Polygon, Optimism (OVM 1 & 2), and BNB Chain (BSC).\n\n3. What are the different column data types and what information do they contain?\n   \n   The different column data types include contract_address, topic1, topic2, topic3, topic4, data, tx_hash, block_hash, block_number, block_time, index, and tx_index. They contain information such as the address of the contract that emitted the log, keccak256 hash of a flattened event declaration string, unindexed data containing further information on the event, the transaction hash of the transaction that produced this log, and the time when the block was mined that includes this log."
}
